//
// Generated by Microsoft (R) HLSL Shader Compiler 10.1
//
//
// Buffer Definitions: 
//
// cbuffer _RootShaderParameters
// {
//
//   float2 SvPositionToUVScale;        // Offset:   16 Size:     8
//   int CubeFace;                      // Offset:   24 Size:     4
//   uint MipIndex;                     // Offset:   28 Size:     4
//   uint NumMips;                      // Offset:   32 Size:     4
//
// }
//
//
// Resource Bindings:
//
// Name                                 Type  Format         Dim      HLSL Bind  Count
// ------------------------------ ---------- ------- ----------- -------------- ------
// SourceCubemapSampler              sampler      NA          NA             s0      1 
// SourceCubemapTexture              texture  float4        cube             t0      1 
// _RootShaderParameters             cbuffer      NA          NA            cb0      1 
//
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_POSITION              0   xyzw        0      POS   float   xy  
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_Target                0   xyzw        0   TARGET   float   xyzw
//
ps_5_0
dcl_globalFlags refactoringAllowed
dcl_constantbuffer CB0[3], immediateIndexed
dcl_sampler s0, mode_default
dcl_resource_texturecube (float,float,float,float) t0
dcl_input_ps_siv linear noperspective v0.xy, position
dcl_output o0.xyzw
dcl_temps 10
mul r0.xy, v0.xyxx, cb0[1].xyxx
mad r0.xy, r0.xyxx, l(2.000000, 2.000000, 0.000000, 0.000000), l(-1.000000, -1.000000, 0.000000, 0.000000)
ieq r1.xyzw, l(1, 2, 3, 4), cb0[1].zzzz
mov r0.z, -r0.y
mov r0.w, l(1.000000)
mul r2.xy, r0.xzxx, l(-1.000000, 1.000000, 0.000000, 0.000000)
mov r2.z, l(-1.000000)
movc r2.xyz, r1.wwww, r0.xzwx, r2.xyzx
mov r3.yz, r0.zzxz
mov r3.x, l(-1.000000)
movc r2.xyz, r1.zzzz, r3.zxyz, r2.xyzx
movc r1.yzw, r1.yyyy, r0.xxwy, r2.xxyz
movc r1.xyz, r1.xxxx, r3.xyzx, r1.yzwy
mul r0.xyz, r0.wzxw, l(1.000000, 1.000000, -1.000000, 0.000000)
movc r0.xyz, cb0[1].zzzz, r1.xyzx, r0.xyzx
utof r0.w, cb0[1].w
iadd r1.x, l(-1), cb0[2].x
utof r1.y, r1.x
add r1.y, r1.y, l(-1.000000)
add r0.w, -r0.w, r1.y
add r0.w, -r0.w, l(1.000000)
mul r0.w, r0.w, l(0.833333)
exp r0.w, r0.w
lt r1.y, r0.w, l(0.010000)
if_nz r1.y
  sample_l_indexable(texturecube)(float,float,float,float) o0.xyzw, r0.xyzx, t0.xyzw, s0, l(0.000000)
  ret 
endif 
dp3 r1.y, r0.xyzx, r0.xyzx
rsq r1.y, r1.y
mul r2.xyz, r0.xyzx, r1.yyyy
ge r0.x, r2.z, l(0.000000)
movc r0.xy, r0.xxxx, l(1.000000,-1.000000,0,0), l(-1.000000,1.000000,0,0)
mad r0.z, r0.z, r1.y, r0.x
rcp r0.z, r0.z
mul r1.yzw, r2.yyxy, r2.xxxy
mul r3.y, -r0.z, r1.y
mul r1.y, -r0.z, r0.x
mad r3.x, r1.y, r1.z, l(1.000000)
mul r4.x, r0.x, r3.y
mul r5.x, r2.x, r0.y
mad r4.y, r1.w, -r0.z, r0.x
ishl r0.xy, l(1, 6, 0, 0), r1.xxxx
imul null, r0.x, r0.x, r0.y
utof r0.x, r0.x
div r0.x, l(12.566371), r0.x
add r0.x, r0.x, r0.x
lt r0.y, r0.w, l(0.100000)
movc r0.z, r0.y, l(32), l(64)
lt r1.x, l(0.990000), r0.w
if_nz r1.x
  mov r3.w, r2.x
  mov r4.z, r2.y
  mul r5.yz, r2.yyzy, l(0.000000, -1.000000, 1.000000, 0.000000)
  mov r1.xyzw, l(0,0,0,0)
  mov r2.w, l(0)
  loop 
    uge r5.w, r2.w, r0.z
    breakc_nz r5.w
    utof r5.w, r2.w
    mul r5.w, r5.w, l(0.015625)
    frc r5.w, r5.w
    bfrev r6.x, r2.w
    xor r6.x, r6.x, l(0)
    utof r6.x, r6.x
    mul r6.y, r6.x, l(0.000000)
    mul r5.w, r5.w, l(6.283185)
    sqrt r7.z, r6.y
    mad r6.x, -r6.x, l(0.000000), l(1.000000)
    sqrt r6.x, r6.x
    sincos r8.x, r9.x, r5.w
    mul r7.x, r6.x, r9.x
    mul r7.y, r6.x, r8.x
    mul r5.w, r7.z, l(20.371832)
    div r5.w, l(1.000000, 1.000000, 1.000000, 1.000000), r5.w
    div r5.w, r5.w, r0.x
    log r5.w, r5.w
    mul r5.w, r5.w, l(0.500000)
    dp3 r6.x, r7.xyzx, r3.xywx
    dp3 r6.y, r7.xyzx, r4.xyzx
    dp3 r6.z, r7.xyzx, r5.xyzx
    sample_l_indexable(texturecube)(float,float,float,float) r6.xyzw, r6.xyzx, t0.xyzw, s0, r5.w
    add r1.xyzw, r1.xyzw, r6.xyzw
    iadd r2.w, r2.w, l(1)
  endloop 
  mul o0.xyzw, r1.xyzw, l(0.015625, 0.015625, 0.015625, 0.015625)
else 
  movc r0.y, r0.y, l(32.000000), l(64.000000)
  mul r0.w, r0.w, r0.w
  mul r1.x, r0.w, r0.w
  mad r0.w, r0.w, r0.w, l(-1.000000)
  mov r3.z, r2.x
  mov r4.w, r2.y
  mul r5.yz, r2.yyzy, l(0.000000, -1.000000, 1.000000, 0.000000)
  mov r2.xyzw, l(0,0,0,0)
  mov r1.yz, l(0,0,0,0)
  loop 
    uge r1.w, r1.z, r0.z
    breakc_nz r1.w
    utof r1.w, r1.z
    div r1.w, r1.w, r0.y
    frc r1.w, r1.w
    bfrev r3.w, r1.z
    xor r3.w, r3.w, l(0)
    utof r3.w, r3.w
    mul r4.z, r3.w, l(0.000000)
    mul r1.w, r1.w, l(6.283185)
    mad r3.w, -r3.w, l(0.000000), l(1.000000)
    mad r4.z, r0.w, r4.z, l(1.000000)
    div r3.w, r3.w, r4.z
    sqrt r6.z, r3.w
    add r3.w, -r3.w, l(1.000000)
    sqrt r3.w, r3.w
    sincos r7.x, r8.x, r1.w
    mul r6.x, r3.w, r8.x
    mul r6.y, r3.w, r7.x
    add r1.w, r6.z, r6.z
    mad r6.xyw, r1.wwww, r6.xyxz, l(-0.000000, -0.000000, 0.000000, -1.000000)
    lt r1.w, l(0.000000), r6.w
    if_nz r1.w
      mad r1.w, r6.z, r1.x, -r6.z
      mad r1.w, r1.w, r6.z, l(1.000000)
      mul r1.w, r1.w, r1.w
      mul r1.w, r1.w, l(3.141593)
      div r1.w, r1.x, r1.w
      mul r1.w, r0.y, r1.w
      mul r1.w, r1.w, l(0.250000)
      div r1.w, l(1.000000, 1.000000, 1.000000, 1.000000), r1.w
      div r1.w, r1.w, r0.x
      log r1.w, r1.w
      mul r1.w, r1.w, l(0.500000)
      dp3 r7.x, r6.xywx, r3.xyzx
      dp3 r7.y, r6.xywx, r4.xywx
      dp3 r7.z, r6.xywx, r5.xyzx
      sample_l_indexable(texturecube)(float,float,float,float) r7.xyzw, r7.xyzx, t0.xyzw, s0, r1.w
      mad r2.xyzw, r7.xyzw, r6.wwww, r2.xyzw
      add r1.y, r1.y, r6.w
    endif 
    iadd r1.z, r1.z, l(1)
  endloop 
  div o0.xyzw, r2.xyzw, r1.yyyy
endif 
ret 
// Approximately 143 instruction slots used
